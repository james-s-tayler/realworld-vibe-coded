name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Cancel in-progress runs for the same ref/PR to save minutes
concurrency:
  group: server-ci-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  # Detect changes to specific paths to gate downstream jobs
  changes:
    name: changes
    runs-on: ubuntu-latest
    outputs:
      client: ${{ steps.filter.outputs.client }}
      server: ${{ steps.filter.outputs.server }}
      infra: ${{ steps.filter.outputs.infra }}
      task_runner: ${{ steps.filter.outputs.task_runner }}
      test_postman: ${{ steps.filter.outputs.test_postman }}
      test_e2e: ${{ steps.filter.outputs.test_e2e }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for path changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            client:
              - 'App/Client/**'
            server:
              - 'App/Server/**'
            infra:
              - 'Infra/**'
            task_runner:
              - 'Task/Runner/**'
            test_postman:
              - 'Test/Postman/**'
            test_e2e:
              - 'Test/e2e/**'
  build-nuke:
    name: build-nuke
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.task_runner == 'true' }}
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET (from global.json)
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: App/Server/global.json
          cache: true
          cache-dependency-path: "**/packages.lock.json"

      - name: Verify .NET version
        run: dotnet --info

      - name: Build (Nuke build system)
        run: dotnet build Task/Runner/Nuke.sln

  build-server:
    name: build-server
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.server == 'true' }}
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET (from global.json)
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: App/Server/global.json
          cache: true
          cache-dependency-path: "**/packages.lock.json"

      - name: Verify .NET version
        run: dotnet --info

      - name: Build (server)
        run: ./build.sh build-server

  test-server:
    name: test-server
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.server == 'true' }}
    # Run tests as an independent job so it shows up as its own status check
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET (from global.json)
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: App/Server/global.json
          cache: true
          cache-dependency-path: "**/packages.lock.json"

      - name: Verify .NET version
        run: dotnet --info

      - name: Test (server)
        id: xunit_tests
        run: |
          set +e  # Don't exit on error
          ./build.sh test-server
          TEST_EXIT_CODE=$?
          echo "exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          exit 0  # Always succeed so we can upload artifacts and comment
        
      - name: Comment test results on PR
        if: always() && github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v5
        with:
          issue-number: ${{ github.event.number }}
          body-path: Reports/Server/Artifacts/Tests/Report.md
          edit-mode: replace

      - name: Comment coverage results on PR
        if: always() && github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v5
        with:
          issue-number: ${{ github.event.number }}
          body-path: Reports/Server/Artifacts/Coverage/SummaryGithub.md
          edit-mode: replace
          
      - name: Code Coverage Summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: Reports/Server/Results/**/coverage.cobertura.xml
          format: markdown
          output: both
          badge: true
          fail_below_min: true
          thresholds: '60 80'
          
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: always() && github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
          
      - name: Upload TestServer Reports
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests failed
        with:
          name: test-server-reports
          path: |
            Reports/Server/Artifacts
          retention-days: 7

      - name: Fail job if tests failed
        if: steps.xunit_tests.outputs.exit_code != '0'
        run: |
          echo "xUnit tests failed with exit code ${{ steps.xunit_tests.outputs.exit_code }}"
          exit ${{ steps.xunit_tests.outputs.exit_code }}

  lint-server-verify:
    name: lint-server-verify
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.server == 'true' }}
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET (from global.json)
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: App/Server/global.json
          cache: true
          cache-dependency-path: "**/packages.lock.json"

      - name: Verify .NET version
        run: dotnet --info

      - name: Lint (server)
        run: ./build.sh lint-server-verify

  lint-nuke-verify:
    name: lint-nuke-verify
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.task_runner == 'true' }}
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET (from global.json)
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: App/Server/global.json
          cache: true
          cache-dependency-path: "**/packages.lock.json"

      - name: Verify .NET version
        run: dotnet --info

      - name: Lint (Nuke build targets)
        run: ./build.sh lint-nuke-verify

  build-client:
    name: build-client
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.client == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: App/Client/package-lock.json

      - name: Install dependencies
        run: cd App/Client && npm ci

      - name: Build (client)
        run: ./build.sh build-client

  test-client:
    name: test-client
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.client == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: App/Client/package-lock.json

      - name: Install dependencies
        run: cd App/Client && npm ci

      - name: Test (client)
        run: ./build.sh test-client

  lint-client-verify:
    name: lint-client-verify
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.client == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: App/Client/package-lock.json

      - name: Install dependencies
        run: cd App/Client && npm ci

      - name: Lint (client)
        run: ./build.sh lint-client-verify

  test-server-postman:
    name: test-server-postman
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.server == 'true' || needs.changes.outputs.test_postman == 'true' }}
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET (from global.json)
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: App/Server/global.json
          cache: true
          cache-dependency-path: "**/packages.lock.json"

      - name: Verify .NET version
        run: dotnet --info

      - name: Test Server (Postman)
        id: postman_tests
        run: |
          set +e  # Don't exit on error
          ./build.sh test-server-postman
          TEST_EXIT_CODE=$?
          echo "exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          exit 0  # Always succeed so we can upload artifacts and comment

      - name: Upload Postman Reports
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests failed
        with:
          name: postman-test-reports
          path: |
            Reports/Test/Postman/newman-report.json
          retention-days: 7

      - name: Parse test results and create PR comment
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { parseNewmanReport } = require('./.github/scripts/newman-report-parser.js');

            try {
              const commentBody = parseNewmanReport('Reports/Test/Postman/newman-report.json', context);

              if (!commentBody) {
                console.log('No comment body generated, skipping PR comment');
                return;
              }

              // Always create a new comment for each test run
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
              console.log('Created new PR comment');

            } catch (error) {
              console.error('Error creating/updating PR comment:', error);
            }

      - name: Fail job if tests failed
        if: steps.postman_tests.outputs.exit_code != '0'
        run: |
          echo "Postman tests failed with exit code ${{ steps.postman_tests.outputs.exit_code }}"
          exit ${{ steps.postman_tests.outputs.exit_code }}

  test-e2e:
    name: test-e2e
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.server == 'true' || needs.changes.outputs.client == 'true' || needs.changes.outputs.test_e2e == 'true' }}
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET (from global.json)
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: App/Server/global.json
          cache: true
          cache-dependency-path: "**/packages.lock.json"

      - name: Verify .NET version
        run: dotnet --info

      - name: Test Server (E2E)
        id: e2e_tests
        run: |
          set +e  # Don't exit on error
          ./build.sh test-e2e
          TEST_EXIT_CODE=$?
          echo "exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          exit 0  # Always succeed so we can upload artifacts and comment

      - name: Upload E2E Test Reports
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests failed
        with:
          name: e2e-test-reports
          path: |
            Reports/Test/e2e/*.trx
          retention-days: 7

      - name: Upload E2E Test Traces
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests failed
        with:
          name: e2e-test-traces
          path: |
            Reports/Test/e2e/traces/*.zip
          retention-days: 7

      - name: Parse test results and create PR comment
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { parseMultipleXUnitReports } = require('./.github/scripts/xunit-report-parser.js');

            try {
              const commentBody = parseMultipleXUnitReports('Reports/Test/e2e', context, '(E2E)');

              if (!commentBody) {
                console.log('No comment body generated, skipping PR comment');
                return;
              }

              // Always create a new comment for each test run
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
              console.log('Created new PR comment');

            } catch (error) {
              console.error('Error creating/updating PR comment:', error);
            }

      - name: Fail job if tests failed
        if: steps.e2e_tests.outputs.exit_code != '0'
        run: |
          echo "E2E tests failed with exit code ${{ steps.e2e_tests.outputs.exit_code }}"
          exit ${{ steps.e2e_tests.outputs.exit_code }}
