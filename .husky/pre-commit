#!/bin/sh
# Cross-platform pre-commit hook that runs appropriate lint targets based on changed files

# Get list of staged files
staged_files=$(git diff --cached --name-only)

# Check if there are any changes in App/Server
server_changes=$(echo "$staged_files" | grep "^App/Server/" | wc -l)

# Check if there are any changes in App/Client
client_changes=$(echo "$staged_files" | grep "^App/Client/" | wc -l)

# Check if there are any changes in Task/Runner  
task_runner_changes=$(echo "$staged_files" | grep "^Task/Runner/" | wc -l)

# Run lint-server-fix if there are server changes
if [ "$server_changes" -gt 0 ]; then
  echo "🔧 Server changes detected, running lint-server-verify..."
  if ! ./build.sh lint-server-verify; then
    echo "❌ Server linting failed. Run `nuke LintServerFix` to try and fix the issues."
    exit 1
  fi
  echo "✅ Server linting completed successfully."
fi

# Run lint-client-fix if there are client changes
if [ "$client_changes" -gt 0 ]; then
  echo "🔧 Client changes detected, running lint-client-verify..."
  if ! ./build.sh lint-client-verify; then
    echo "❌ Client linting failed. Run `nuke LintClientFix` to try and fix the issues."
    exit 1
  fi
  echo "✅ Client linting completed successfully."
fi

# Run lint-nuke-fix if there are Task/Runner changes
if [ "$task_runner_changes" -gt 0 ]; then
  echo "🔧 Task/Runner changes detected, running lint-nuke-verify..."
  if ! ./build.sh lint-nuke-verify; then
    echo "❌ Nuke linting failed. Run `nuke LintNukeFix` to try and fix the issues."
    exit 1
  fi
  echo "✅ Nuke linting completed successfully."
fi

# If no relevant changes, skip linting
if [ "$server_changes" -eq 0 ] && [ "$client_changes" -eq 0 ] && [ "$task_runner_changes" -eq 0 ]; then
  echo "ℹ️  No changes detected in App/Server, App/Client, or Task/Runner directories. Skipping linting."
fi

echo "🎉 Pre-commit hook completed successfully."
