using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Server.SourceGenerators;

[Generator]
public class MediatRBehaviorRegistrationGenerator : ISourceGenerator
{
  public void Initialize(GeneratorInitializationContext context)
  {
    // No syntax receiver needed - we'll scan the entire compilation
  }

  public void Execute(GeneratorExecutionContext context)
  {
    var registrations = new List<BehaviorRegistration>();

    // Get all types from all referenced assemblies and the current compilation
    var allTypes = context.Compilation.GlobalNamespace.GetAllTypes();

    foreach (var typeSymbol in allTypes)
    {
      if (typeSymbol.TypeKind != TypeKind.Class && typeSymbol.TypeKind != TypeKind.Struct)
      {
        continue;
      }

      var registration = ExtractRegistration(typeSymbol);
      if (registration != null)
      {
        registrations.Add(registration);
      }
    }

    if (registrations.Count == 0)
    {
      return;
    }

    // Sort registrations for consistency
    registrations = registrations.OrderBy(r => r.RequestType).ToList();

    var source = GenerateRegistrationCode(registrations);
    context.AddSource("MediatRBehaviorRegistrations.g.cs", SourceText.From(source, Encoding.UTF8));
  }

  private BehaviorRegistration? ExtractRegistration(INamedTypeSymbol typeSymbol)
  {
    foreach (var iface in typeSymbol.AllInterfaces)
    {
      if (iface.IsGenericType && iface.TypeArguments.Length == 1)
      {
        var interfaceName = iface.ConstructedFrom.ToDisplayString();

        if (interfaceName == "Server.SharedKernel.ICommand<T>" ||
            interfaceName == "Server.SharedKernel.IQuery<T>")
        {
          var innerType = iface.TypeArguments[0];
          return new BehaviorRegistration
          {
            RequestType = typeSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat),
            InnerType = innerType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat),
            RequestTypeShort = typeSymbol.Name,
            InnerTypeShort = innerType.Name
          };
        }
      }
    }

    return null;
  }

  private string GenerateRegistrationCode(List<BehaviorRegistration> registrations)
  {
    var sb = new StringBuilder();

    sb.AppendLine("// <auto-generated/>");
    sb.AppendLine("#nullable enable");
    sb.AppendLine();
    sb.AppendLine("using Ardalis.Result;");
    sb.AppendLine("using MediatR;");
    sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
    sb.AppendLine("using Server.SharedKernel;");
    sb.AppendLine();
    sb.AppendLine("namespace Server.Web.Configurations");
    sb.AppendLine("{");
    sb.AppendLine("  /// <summary>");
    sb.AppendLine("  /// Auto-generated MediatR pipeline behavior registrations.");
    sb.AppendLine("  /// This class is generated at compile-time by Server.SourceGenerators.");
    sb.AppendLine("  /// </summary>");
    sb.AppendLine("  public static partial class MediatrConfigs");
    sb.AppendLine("  {");
    sb.AppendLine("    /// <summary>");
    sb.AppendLine("    /// Registers TransactionBehavior and ExceptionHandlingBehavior for all ICommand and IQuery types.");
    sb.AppendLine("    /// Generated registrations ensure all request types have the required pipeline behaviors.");
    sb.AppendLine("    /// </summary>");
    sb.AppendLine("    private static IServiceCollection AddGeneratedPipelineBehaviors(this IServiceCollection services)");
    sb.AppendLine("    {");

    foreach (var registration in registrations)
    {
      sb.AppendLine($"      // {registration.RequestTypeShort}");
      sb.AppendLine($"      services.AddScoped<IPipelineBehavior<{registration.RequestType}, Result<{registration.InnerType}>>, TransactionBehavior<{registration.RequestType}, {registration.InnerType}>>();");
      sb.AppendLine($"      services.AddScoped<IPipelineBehavior<{registration.RequestType}, Result<{registration.InnerType}>>, ExceptionHandlingBehavior<{registration.RequestType}, {registration.InnerType}>>();");
      sb.AppendLine();
    }

    sb.AppendLine("      return services;");
    sb.AppendLine("    }");
    sb.AppendLine("  }");
    sb.AppendLine("}");

    return sb.ToString();
  }

  private class BehaviorRegistration
  {
    public string RequestType { get; set; } = string.Empty;
    public string InnerType { get; set; } = string.Empty;
    public string RequestTypeShort { get; set; } = string.Empty;
    public string InnerTypeShort { get; set; } = string.Empty;
  }
}

internal static class NamespaceExtensions
{
  public static IEnumerable<INamedTypeSymbol> GetAllTypes(this INamespaceSymbol namespaceSymbol)
  {
    foreach (var type in namespaceSymbol.GetTypeMembers())
    {
      yield return type;
    }

    foreach (var nestedNamespace in namespaceSymbol.GetNamespaceMembers())
    {
      foreach (var type in nestedNamespace.GetAllTypes())
      {
        yield return type;
      }
    }
  }
}
